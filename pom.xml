<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.wolf</groupId>
    <artifactId>violin</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>violin</name>

    <modules>
        <module>violin-utils</module>
        <module>violin-test</module>
        <module>violin-testassembly</module>
        <module>dependence</module>
    </modules>

    <!--属性可被使用-->
    <properties>
        <!--maven编译.java文件使用的编码-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <fastjson.version>1.1.42</fastjson.version>
        <junit.version>4.12</junit.version>
        <slf4j.version>1.7.2</slf4j.version>
        <log4j.version>1.2.17</log4j.version>
        <spring.version>4.1.6.RELEASE</spring.version>
        <jackson.version>2.11.3</jackson.version>
    </properties>

    <!--用来提供了一种方式来统一依赖版本号-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.zookeeper</groupId>
                <artifactId>zookeeper</artifactId>
                <version>3.4.6</version>
            </dependency>

            <!--jackson-->
            <dependency>
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-yaml</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <dependency>
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-xml</artifactId>
                <version>${jackson.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!--<dependency>-->
        <!--<groupId>log4j</groupId>-->
        <!--<artifactId>log4j</artifactId>-->
        <!--<version>1.2.17</version>-->
        <!--</dependency>-->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
        </dependency>

        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.1.1</version>
        </dependency>


        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>2.7.3</version>
            <type>jar</type>
            <!--type默认是jar，当引入的只是一个jar时就不用加了，如果是引入的一个项目包含多个jar的时候，就要加上type标签值为pom-->
            <scope>compile</scope>
            <!--compile，编译，测试，运行阶段都需要这个artifact对应的jar包在classpath中。-->
            <!--provided，只影响到编译，测试阶段-->
            <!--runtime，只影响运行和测试-->
            <!--test，只影响测试-->
            <!--system，跟provided 相似，但是在系统中要以外部JAR包的形式提供，maven不会在repository查找它，要提供<systemPath>${java.home}/lib/rt.jar</systemPath>-->
        </dependency>

        <!--依赖pom，这里要记得先install dependence这个工程-->
        <dependency>
            <groupId>com.wolf</groupId>
            <artifactId>dependence</artifactId>
            <version>1.0-SNAPSHOT</version>
            <type>pom</type>
        </dependency>

        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.1</version>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.10</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.1</version>
            <exclusions>
                <exclusion>
                    <artifactId>commons-logging</artifactId>
                    <groupId>commons-logging</groupId>
                </exclusion>
            </exclusions>
        </dependency>


        <dependency>
            <groupId>com.caucho</groupId>
            <artifactId>hessian</artifactId>
            <version>4.0.7</version>
        </dependency>


        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>6.8</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.3.2</version>
        </dependency>


        <dependency>
            <groupId>org.apache.storm</groupId>
            <artifactId>storm-core</artifactId>
            <version>0.9.3</version>
            <exclusions>
                <exclusion>
                    <artifactId>log4j-over-slf4j</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>logback-classic</artifactId>
                    <groupId>ch.qos.logback</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.yaml</groupId>
            <artifactId>snakeyaml</artifactId>
            <version>1.12</version>
        </dependency>

        <dependency>
            <groupId>com.taobao.metamorphosis</groupId>
            <artifactId>metamorphosis-client</artifactId>
            <version>1.4.6</version>
            <exclusions>
                <exclusion>
                    <artifactId>commons-logging</artifactId>
                    <groupId>commons-logging</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>netty</artifactId>
                    <groupId>io.netty</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.7.4</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.7.4</version>
        </dependency>

        <!-- logging start -->

        <!-- slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- common-logging 实际调用slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- java.util.logging 实际调用slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- logging end -->

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>1.6.2</version>
        </dependency>


        <!--展示可以使用开闭区间,[2.0,3.0)表示2.0<=ver<3.0取最新的-->
        <!--<dependency>-->
        <!--<groupId>xx</groupId>-->
        <!--<artifactId>base-service</artifactId>-->
        <!--<version>[1.9.0,1.9.50-SNAPSHOT)</version>-->
        <!--</dependency>-->


        <!--<dependency>-->
        <!--<groupId>com.alibaba.jstorm</groupId>-->
        <!--<artifactId>jstorm-client</artifactId>-->
        <!--<version>0.9.6.2</version>-->

        <!--&lt;!&ndash;<exclusions>&ndash;&gt;-->
        <!--&lt;!&ndash;<exclusion>&ndash;&gt;-->
        <!--&lt;!&ndash;<groupId>org.slf4j</groupId>&ndash;&gt;-->
        <!--&lt;!&ndash;<artifactId>slf4j-log4j12</artifactId>&ndash;&gt;-->
        <!--&lt;!&ndash;</exclusion>&ndash;&gt;-->
        <!--&lt;!&ndash;<exclusion>&ndash;&gt;-->
        <!--&lt;!&ndash;<groupId>log4j</groupId>&ndash;&gt;-->
        <!--&lt;!&ndash;<artifactId>log4j</artifactId>&ndash;&gt;-->
        <!--&lt;!&ndash;</exclusion>&ndash;&gt;-->
        <!--&lt;!&ndash;</exclusions>&ndash;&gt;-->
        <!--</dependency>-->

    </dependencies>

    <!--不同侧面，通过命令：install -P test2 指定。会自动糅合进相应的标签中-->
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <envPrefix>test</envPrefix>
                <netty.version>3.2.3.Final</netty.version>
            </properties>
            <!-- 默认激活本环境 -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>test2</id>
            <properties>
                <envPrefix>test2</envPrefix>
                <netty.version>3.6.4.Final</netty.version>
            </properties>
        </profile>
        <profile>
            <id>test3</id>
            <properties>
                <envPrefix>test3</envPrefix>
                <netty.version>3.6.5.Final</netty.version>
            </properties>
        </profile>
    </profiles>


    <build>

        <!--
        如果没有指定resources，目前认为自动会将classpath下的src/main/java下的.class文件和
        src/main/resources下的.xml文件放到target里头的classes文件夹下的package下的文件夹里。
        -->
        <resources>
            <resource>
                <!--<targetPath></targetPath> 指定build资源到哪个目录，默认是base directory-->
                <directory>src/main/resources
                </directory><!--build的过程用的文件，并且将其放到targetPath下，默认的directory是${basedir}/src/main/resources-->
                <filtering>true
                </filtering><!--filtering:指定是否将filter文件(即build下的filters里定义的property文件)的变量值在这个resource文件有效-->
            </resource>
        </resources>

        <!--这个是用来管理插件的声明，父类中用到，让子类继承的-->
        <pluginManagement>
            <plugins>
                <!-- 编译插件，重写的目的主要是修改配置 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>2.5.1</version>
                    <configuration>
                        <source>11</source>
                        <target>11</target>
                        <encoding>${project.build.sourceEncoding}</encoding>
                        <showWarnings>true</showWarnings>
                        <!--没有下面，报错误: 找不到符号 [ERROR] 符号:   类 ByteInputStream-->
                        <!--<compilerArguments>-->
                        <!--<verbose/>-->
                        <!--<bootclasspath>${java.home}/lib/rt.jar;${java.home}/lib/jce.jar</bootclasspath>-->
                        <!--</compilerArguments>-->
                    </configuration>
                </plugin>

                <!-- 发布源代码jar-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>2.1.2</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <phase>package</phase>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--生成Javadoc包,mac上死活找不到JAVA_HOME暂时注掉-->
                <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-javadoc-plugin</artifactId>-->
                <!--<version>2.7</version>-->
                <!--<executions>-->
                <!--<execution>-->
                <!--<id>attach-javadocs</id>-->
                <!--<goals>-->
                <!--<goal>jar</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
                <!--</plugin>-->
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>