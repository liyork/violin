是由于没执行finally？

还是由于lock.unlock();的问题?


改成synchronized可以正常跑通，说明原生synchronized遇到StackOverFlow时也会释放锁，
然后bbb可以进行lock执行


加上
        } finally {
            q++;
     46       System.out.println("xxxxxxxxxxx q1:"+q);
			之后
异常
xxxxxxjava.lang.StackOverflowError
java.lang.StackOverflowError
	at sun.misc.Unsafe.compareAndSwapLong(Native Method)
	at java.util.concurrent.ConcurrentHashMap.addCount(ConcurrentHashMap.java:2259)
	at java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1070)
	at java.util.concurrent.ConcurrentHashMap.putIfAbsent(ConcurrentHashMap.java:1535)
	at java.lang.ClassLoader.getClassLoadingLock(ClassLoader.java:463)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:404)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at com.xx.jsf.gd.registry.StackOverFlow.plus(StackOverFlow.java:46)  --这个是错误的根源


去掉46 的System.out.println("xxxxxxxxxxx q1:"+q);得到


xxxxxxjava.lang.StackOverflowError
java.lang.StackOverflowError
	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:149)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1261)
	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:457)
	at com.xx.jsf.gd.registry.StackOverFlow.plus(StackOverFlow.java:47)

错了。
java.lang.StackOverflowError
	at sun.misc.Unsafe.compareAndSwapLong(Native Method)
	at java.util.concurrent.ConcurrentHashMap.addCount(ConcurrentHashMap.java:2259)
	这是异常发生的根源，
	会执行finally

在finally中执行
state:aaa 2，还是aaa是锁的拥有者，应该是没有剪干净。

但是catch中打印的i=7652，而每个finnaly中q进行++得到一样的值
或者在finny中对i--;，然后最后打印的是i:0
可见，finally是执行了，而且没少

看来问题出在了ReentrantLock上，而且最后finnaly中打印state:aaa 12，也并没有消灭完



java.lang.StackOverflowError
	at sun.misc.Unsafe.compareAndSwapLong(Native Method)
	at java.util.concurrent.ConcurrentHashMap.addCount(ConcurrentHashMap.java:2259)
	at java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1070)
	at java.util.concurrent.ConcurrentHashMap.putIfAbsent(ConcurrentHashMap.java:1535)
	at java.lang.ClassLoader.getClassLoadingLock(ClassLoader.java:463)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:404)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at com.xx.jsf.gd.registry.StackOverFlow.plus(StackOverFlow.java:45)
从异常看，应该是最后一次调用plus时触发了StackOverFlow，然后打印yyyyyyyy然后 e.printStackTrace然后执行finnaly
哦，不是，是倒数第二次执行plus然后内部调用plus，执行System.out.println("yyyyyyyy,");然后又触发了StackOverFlow
不对啊，没有异常为什么会进入catch？还是得现有异常然后，打印yyyyyyyy然后打印e.printStackTrace时就打印出了当前异常栈

}catch (Error e){
            ///System.out.println("yyyyyyyy,");
            StackTraceElement[] stackTrace = e.getStackTrace();
            for (int j = 0; j < 12; j++) {
                System.out.println(stackTrace[j]);
            }
java.util.concurrent.ConcurrentHashMap.addCount(ConcurrentHashMap.java:2258)
java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1070)
java.util.concurrent.ConcurrentHashMap.putIfAbsent(ConcurrentHashMap.java:1535)
java.lang.ClassLoader.getClassLoadingLock(ClassLoader.java:463)
java.lang.ClassLoader.loadClass(ClassLoader.java:404)
java.lang.ClassLoader.loadClass(ClassLoader.java:411)
sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
java.lang.ClassLoader.loadClass(ClassLoader.java:357)
com.xx.jsf.gd.registry.StackOverFlow.plus(StackOverFlow.java:48)
com.xx.jsf.gd.registry.StackOverFlow.plus(StackOverFlow.java:43)


但是
i--;
            if (i == 0) {
                System.out.println("xxxxxxxxxxx i:"+i);
            }
            lock.unlock();
中进行debug，时，发现当前state=2，-1后还是1并没有释放干净！
那就是少了一次unlock？哪次呢？

要是  if (i <= 1) {
                System.out.println("xxxxxxxxxxx i:"+i);
            }
得到state=3！，看来一定是哪里少了一次unlock


java.lang.StackOverflowError
	at java.util.concurrent.ConcurrentHashMap.addCount(ConcurrentHashMap.java:2258)
	at java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1070)
	at java.util.concurrent.ConcurrentHashMap.putIfAbsent(ConcurrentHashMap.java:1535)
	at java.lang.ClassLoader.getClassLoadingLock(ClassLoader.java:463)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:404)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at com.xx.jsf.gd.registry.StackOverFlow.plus(StackOverFlow.java:46)
这种日志，是不是由于System.out.println导致的二次溢出?
直接打印e.printStackTrace();不行。

但是在finnaly中来两次
            lock.unlock();
            lock.unlock();就可以！
看来一定是哪里少了一次unlock!

外面catch住
System.out.println("Error:stack length:" + stackOverFlow.i);
                    System.out.println("xxxxxx");

xxxxxx
java.lang.StackOverflowError
	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:149)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1261)
	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:457)
	at com.xx.jsf.gd.registry.StackOverFlow.plus(StackOverFlow.java:51)

是不是说明，在最后一次调用溢出之后执行了本次的finnaly，但是由于执行lock.unlock();又产生了溢出?


异常日志为啥是add最后
java.util.concurrent.ConcurrentHashMap.addCount(ConcurrentHashMap.java:2258)
java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1070)
java.util.concurrent.ConcurrentHashMap.putIfAbsent(ConcurrentHashMap.java:1535)
java.lang.ClassLoader.getClassLoadingLock(ClassLoader.java:463)
java.lang.ClassLoader.loadClass(ClassLoader.java:404)
java.lang.ClassLoader.loadClass(ClassLoader.java:411)
sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
java.lang.ClassLoader.loadClass(ClassLoader.java:357)
com.xx.jsf.gd.registry.StackOverFlow.plus(StackOverFlow.java:49)
com.xx.jsf.gd.registry.StackOverFlow.plus(StackOverFlow.java:45)
com.xx.jsf.gd.registry.StackOverFlow.plus(StackOverFlow.java:45)

i++;放在try之外最后的finnaly就是i=1
这能不能证明是调用lock时发生了意外，但是try并没有包住，然后finnaly就少了一次！


lock.lock为什么放在try之外?

哪里都能产生栈溢出，若是finnaly中的呢？。。。。
当前线程所属栈满了，再放入什么也没用
让其他线程监听然后就行了？thread.setUncaughtExceptionHandler
但是这个还是当前线程

确实没有办法清空线程的栈。。





